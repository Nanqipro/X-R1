{"id": "6824855fb449f90af1258d93", "type": "code-generate", "prompt": "\ndef climbing_stairs(n: int) -> int:\n    \"\"\" You are climbing a staircase. It takes n steps to reach the top.\n\n    Each time you can either climb 1 or 2 steps. In how many distinct ways can you\n    climb to the top?\n\n    Example 1:\n        Input: n = 2\n        Output: 2\n        Explanation: There are two ways to climb to the top.\n            1. 1 step + 1 step\n            2. 2 steps\n    \n    Example 2:\n        Input: n = 3\n        Output: 3\n        Explanation: There are three ways to climb to the top.\n            1. 1 step + 1 step + 1 step\n            2. 1 step + 2 steps\n            3. 2 steps + 1 step\n    \n    Constraints:\n        1 <= n <= 45\n        \n    >>> climbing_stairs(2)\n    2\n    >>> climbing_stairs(3)\n    3\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d94", "type": "code-generate", "prompt": "\ndef sqrt_funtion_impl(x: int) -> int:\n    \"\"\" Given a non-negative integer x, return the square root of x rounded down to the \n    nearest integer. The returned integer should be non-negative as well.\n\n    You must not use any built-in exponent function or operator.\n    - For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.\n    \n    Example 1:\n        Input: x = 4\n        Output: 2\n        Explanation: The square root of 4 is 2, so we return 2.\n    \n    Example 2:\n        Input: x = 8\n        Output: 2\n        Explanation: The square root of 8 is 2.82842..., and since we round it down to the\n        nearest integer, 2 is returned.\n        \n    Constraints:\n        0 <= x <= 2^31 - 1\n    \n    >>> sqrt_funtion_impl(4)\n    2\n    >>> sqrt_funtion_impl(8)\n    2\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d95", "type": "code-generate", "prompt": "\ndef add_binary(a: str, b: str) -> str:\n    \"\"\" Given two binary strings a and b, return their sum as a binary string.\n\n    Example 1:\n        Input: a = \"11\", b = \"1\"\n        Output: \"100\"\n    \n    Example 2:\n        Input: a = \"1010\", b = \"1011\"\n        Output: \"10101\"\n\n    Constraints:\n        1 <= a.length, b.length <= 104\n        a and b consist only of '0' or '1' characters.\n        Each string does not contain leading zeros except for the zero itself.\n        \n    >>> add_binary(\"11\", \"1\")\n    \"100\"\n    >>> add_binary(\"1010\", \"1011\")\n    \"10101\"\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d96", "type": "code-generate", "prompt": "from typing import List\n\n\ndef large_integer_plus_one(digits: List[int]) -> List[int]:\n    \"\"\" Increment the large integer by one and return the resulting array of digits.\n    \n    You are given a large integer represented as an integer array digits, where \n    each digits[i] is the ith digit of the integer. The digits are ordered from most \n    significant to least significant in left-to-right order. The large integer does \n    not contain any leading 0's.\n\n    Example 1:\n        Input: digits = [1,2,3]\n        Output: [1,2,4]\n        Explanation: The array represents the integer 123.\n        Incrementing by one gives 123 + 1 = 124.\n        Thus, the result should be [1,2,4].\n    \n    Example 2:\n        Input: digits = [4,3,2,1]\n        Output: [4,3,2,2]\n        Explanation: The array represents the integer 4321.\n        Incrementing by one gives 4321 + 1 = 4322.\n        Thus, the result should be [4,3,2,2].\n    \n    Example 3:\n        Input: digits = [9]\n        Output: [1,0]\n        Explanation: The array represents the integer 9.\n        Incrementing by one gives 9 + 1 = 10.\n        Thus, the result should be [1,0].\n    \n    Constraints:\n        1 <= digits.length <= 100\n        0 <= digits[i] <= 9\n        digits does not contain any leading 0's.\n        \n    >>> large_integer_plus_one([1,2,3])\n    [1,2,4]\n    >>> large_integer_plus_one([4,3,2,1])\n    [4,3,2,2]\n    >>> large_integer_plus_one([9])\n    [1,0]\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d97", "type": "code-generate", "prompt": "\ndef length_of_last_word(s: str) -> int:\n    \"\"\" Given a string s consisting of words and spaces, return the length of the \n    last word in the string.\n\n    A word is a maximal substring consisting of non-space characters only.\n\n    Example 1:\n        Input: s = \"Hello World\"\n        Output: 5\n        Explanation: The last word is \"World\" with length 5.\n    \n    Example 2:\n        Input: s = \"   fly me   to   the moon  \"\n        Output: 4\n        Explanation: The last word is \"moon\" with length 4.\n    \n    Example 3:\n        Input: s = \"luffy is still joyboy\"\n        Output: 6\n        Explanation: The last word is \"joyboy\" with length 6.\n    \n    Constraints:\n        1 <= s.length <= 104\n        s consists of only English letters and spaces ' '.\n        There will be at least one word in s.\n    \n    >>> length_of_last_word(\"Hello World\")\n    5\n    >>> length_of_last_word(\"   fly me   to   the moon  \")\n    4\n    >>> length_of_last_word(\"luffy is still joyboy\")\n    6\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d98", "type": "code-generate", "prompt": "from typing import List\n\n\ndef remove_duplicates(nums: List[int]) -> int:\n    \"\"\" Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place\n    such that each unique element appears only once. The relative order of the elements should be \n    kept the same. Then return the number of unique elements in nums.\n\n    Consider the number of unique elements of nums to be k, to get accepted, you need to do the \n    following things:\n        - Change the array nums such that the first k elements of nums contain the unique elements \n        in the order they were present in nums initially. The remaining elements of nums are not \n        important as well as the size of nums.\n        - Return k.\n    \n    **Custom Judge**:\n\n    The judge will test your solution with the following code:\n\n        int[] nums = [...]; // Input array\n        int[] expectedNums = [...]; // The expected answer with correct length\n\n        int k = removeDuplicates(nums); // Calls your implementation\n\n        assert k == expectedNums.length;\n        for (int i = 0; i < k; i++) {\n            assert nums[i] == expectedNums[i];\n        }\n        \n    If all assertions pass, then your solution will be accepted.\n    \n    Example 1:\n        Input: nums = [1,1,2]\n        Output: 2, nums = [1,2,_]\n        Explanation: Your function should return k = 2, with the first two elements of nums being 1 \n        and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores).\n    \n    Example 2:\n        Input: nums = [0,0,1,1,1,2,2,3,3,4]\n        Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]\n        Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, \n        and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores).\n    \n    Constraints:\n        1 <= nums.length <= 3 * 104\n        -100 <= nums[i] <= 100\n        nums is sorted in non-decreasing order.\n        \n    >>> remove_duplicates([1,1,2])\n    2\n    >>> remove_duplicates([0,0,1,1,1,2,2,3,3,4])\n    5\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d99", "type": "code-generate", "prompt": "\ndef valid_parentheses(s: str) -> bool:\n    \"\"\" Given a string s containing just the characters '(', ')', '{', '}', '[' and ']',\n    determine if the input string is valid.\n\n    An input string is valid if:\n        1. Open brackets must be closed by the same type of brackets.\n        2. Open brackets must be closed in the correct order.\n        3. Every close bracket has a corresponding open bracket of the same type.\n\n    Example 1:\n        Input: s = \"()\"\n        Output: true\n\n    Example 2:\n        Input: s = \"()[]{}\"\n        Output: true\n\n    Example 3:\n        Input: s = \"(]\"\n        Output: false\n\n    Example 4:\n        Input: s = \"([])\"\n        Output: true\n    \n    Constraints:\n        1 <= s.length <= 104\n        s consists of parentheses only '()[]{}'.\n    \n    >>> valid_parentheses(\"()\")\n    True\n    >>> valid_parentheses(\"()[]{}\")\n    True\n    >>> valid_parentheses(\"(]\")\n    False\n    >>> valid_parentheses(\"([])\")\n    True\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d9a", "type": "code-generate", "prompt": "from typing import List\n\n\ndef longest_common_prefix(strs: List[str]) -> str:\n    \"\"\" Write a function to find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n\n    Example 1:\n        Input: strs = [\"flower\",\"flow\",\"flight\"]\n        Output: \"fl\"\n    \n    Example 2:\n        Input: strs = [\"dog\",\"racecar\",\"car\"]\n        Output: \"\"\n        Explanation: There is no common prefix among the input strings.\n    \n    Constraints:\n        1 <= strs.length <= 200\n        0 <= strs[i].length <= 200\n        strs[i] consists of only lowercase English letters if it is non-empty.\n        \n    >>> longest_common_prefix([\"flower\",\"flow\",\"flight\"])\n    \"fl\"\n    >>> longest_common_prefix([\"dog\",\"racecar\",\"car\"])\n    \"\"\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d9b", "type": "code-generate", "prompt": "\ndef is_palindrome_number(x: int) -> bool:\n    \"\"\" Given an integer x, return true if x is a palindrome, and false otherwise.\n\n    Example 1:\n        Input: x = 121\n        Output: true\n        Explanation: 121 reads as 121 from left to right and from right to left.\n    \n    Example 2:\n        Input: x = -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-.\n        Therefore it is not a palindrome.\n    \n    Example 3:\n        Input: x = 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n    \n    Constraints:\n        -2^31 <= x <= 2^31 - 1\n    \n    >>> is_palindrome_number(121)\n    True\n    >>> is_palindrome_number(-121)\n    False\n    >>> is_palindrome_number(10)\n    False\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d9c", "type": "code-generate", "prompt": "from typing import List\n\n\ndef find_single_number(nums: List[int]) -> int:\n    \"\"\" Given a non-empty array of integers nums, every element appears twice except for one. \n    Find that single one.\n    You must implement a solution with a linear runtime complexity and use only constant extra space.\n\n    Example 1:\n        Input: nums = [2,2,1]\n        Output: 1\n\n    Example 2:\n        Input: nums = [4,1,2,1,2]\n        Output: 4\n\n    Example 3:\n        Input: nums = [1]\n        Output: 1\n\n    Constraints:\n        1 <= nums.length <= 3 * 104\n        -3 * 104 <= nums[i] <= 3 * 104\n        Each element in the array appears twice except for one element which appears only once.\n        \n    >>> find_single_number([2,2,1])\n    1\n    >>> find_single_number([4,1,2,1,2])\n    4\n    >>> find_single_number([1])\n    1\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d9d", "type": "code-generate", "prompt": "\ndef get_sheet_column_title(columnNumber: int) -> str:\n    \"\"\" Given an integer columnNumber, return its corresponding column title as it appears \n    in an Excel sheet.\n\n    For example:\n        A -> 1\n        B -> 2\n        C -> 3\n        ...\n        Z -> 26\n        AA -> 27\n        AB -> 28 \n        ...\n    \n    Example 1:\n        Input: columnNumber = 1\n        Output: \"A\"\n    \n    Example 2:\n        Input: columnNumber = 28\n        Output: \"AB\"\n    \n    Example 3:\n        Input: columnNumber = 701\n        Output: \"ZY\"\n\n    Constraints:\n        1 <= columnNumber <= 2^31 - 1\n    \n    >>> get_sheet_column_title(1)\n    \"A\"\n    >>> get_sheet_column_title(28)\n    \"AB\"\n    >>> get_sheet_column_title(701)\n    \"ZY\"\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d9e", "type": "code-generate", "prompt": "from typing import List\n\n\ndef find_majority_element(nums: List[int]) -> int:\n    \"\"\" Given an array nums of size n, return the majority element.\n\n    The majority element is the element that appears more than ⌊n / 2⌋ times. \n    You may assume that the majority element always exists in the array.\n\n    Example 1:\n        Input: nums = [3,2,3]\n        Output: 3\n    \n    Example 2:\n        Input: nums = [2,2,1,1,1,2,2]\n        Output: 2\n    \n    Constraints:\n        n == nums.length\n        1 <= n <= 5 * 10^4\n        -10^9 <= nums[i] <= 10^9\n\n    >>> find_majority_element([3,2,3])\n    3\n    >>> find_majority_element([2,2,1,1,1,2,2])\n    2\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258d9f", "type": "code-generate", "prompt": "\ndef reverse_bits(n: str) -> int:\n    \"\"\" Reverse bits of a given 32 bits unsigned integer.\n    Note:\n        - Note that in some languages, such as Java, there is no unsigned integer type. \n        In this case, both input and output will be given as a signed integer type. \n        They should not affect your implementation, as the integer's internal binary \n        representation is the same, whether it is signed or unsigned.\n        - In Java, the compiler represents the signed integers using 2's complement \n        notation. Therefore, in Example 2 above, the input represents the signed integer\n        -3 and the output represents the signed integer -1073741825.\n    \n    Example 1:\n        Input: n = \"00000010100101000001111010011100\"\n        Output:    964176192 (00111001011110000010100101000000)\n        Explanation: The input binary string 00000010100101000001111010011100 represents \n        the unsigned integer 43261596, so return 964176192 which its binary representation \n        is 00111001011110000010100101000000.\n    \n    Example 2:\n        Input: n = \"11111111111111111111111111111101\"\n        Output:   3221225471 (10111111111111111111111111111111)\n        Explanation: The input binary string 11111111111111111111111111111101 represents \n        the unsigned integer 4294967293, so return 3221225471 which its binary representation \n        is 10111111111111111111111111111111.\n\n    Constraints:\n        The input must be a binary string of length 32\n        \n    >>> reverse_bits(\"00000010100101000001111010011100\")\n    964176192\n    >>> reverse_bits(\"11111111111111111111111111111101\")\n    3221225471\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da0", "type": "code-generate", "prompt": "\ndef hamming_weight(n: int) -> int:\n    \"\"\" Given a positive integer n, write a function that returns the number of set bits in \n    its binary representation (also known as the Hamming weight).\n\n    Example 1:\n        Input: n = 11\n        Output: 3\n        Explanation: The input binary string 1011 has a total of three set bits.\n\n    Example 2:\n        Input: n = 128\n        Output: 1\n        Explanation: The input binary string 10000000 has a total of one set bit.\n\n    Example 3:\n        Input: n = 2147483645\n        Output: 30\n        Explanation: The input binary string 1111111111111111111111111111101 has a total of \n        thirty set bits.\n\n    Constraints:\n        1 <= n <= 2^31 - 1\n        \n    >>> hamming_weight(11)\n    3\n    >>> hamming_weight(128)\n    1\n    >>> hamming_weight(2147483645)\n    30\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da1", "type": "code-generate", "prompt": "\ndef is_happy_number(n: int) -> bool:\n    \"\"\" Write an algorithm to determine if a number n is happy.\n\n    A happy number is a number defined by the following process:\n        - Starting with any positive integer, replace the number by the sum of the squares of its digits.\n        - Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a \n        cycle which does not include 1.\n        - Those numbers for which this process ends in 1 are happy.\n    \n    Return true if n is a happy number, and false if not.\n    \n    Example 1:\n        Input: n = 19\n        Output: true\n        Explanation:\n            12 + 92 = 82\n            82 + 22 = 68\n            62 + 82 = 100\n            12 + 02 + 02 = 1\n\n    Example 2:\n        Input: n = 2\n        Output: false\n    \n    Constraints:\n        1 <= n <= 2^31 - 1\n        \n    >>> is_happy_number(19)\n    True\n    >>> is_happy_number(2)\n    False\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da2", "type": "code-generate", "prompt": "\ndef check_isomorphic_strings(s: str, t: str) -> bool:\n    \"\"\" Given two strings s and t, determine if they are isomorphic.\n\n    Two strings s and t are isomorphic if the characters in s can be replaced to get t.\n\n    All occurrences of a character must be replaced with another character while preserving \n    the order of characters. No two characters may map to the same character, but a character \n    may map to itself.\n\n    Example 1:\n        Input: s = \"egg\", t = \"add\"\n        Output: true\n        Explanation: The strings s and t can be made identical by:\n            Mapping 'e' to 'a'.\n            Mapping 'g' to 'd'.\n\n    Example 2:\n        Input: s = \"foo\", t = \"bar\"\n        Output: false\n        Explanation: The strings s and t can not be made identical as 'o' needs to be mapped \n        to both 'a' and 'r'.\n\n    Example 3:\n        Input: s = \"paper\", t = \"title\"\n        Output: true\n    \n    Constraints:\n        1 <= s.length <= 5 * 10^4\n        t.length == s.length\n        s and t consist of any valid ascii character.\n    \n    >>> check_isomorphic_strings(\"egg\", \"add\")\n    True\n    >>> check_isomorphic_strings(\"foo\", \"bar\")\n    False\n    >>> check_isomorphic_strings(\"paper\", \"title\")\n    True\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da3", "type": "code-generate", "prompt": "from typing import List\n\n\ndef check_contains_duplicate(nums: List[int], k: int) -> bool:\n    \"\"\" Given an integer array nums and an integer k, return true if there are two distinct\n    indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\n\n    Example 1:\n        Input: nums = [1,2,3,1], k = 3\n        Output: true\n\n    Example 2:\n        Input: nums = [1,0,1,1], k = 1\n        Output: true\n\n    Example 3:\n        Input: nums = [1,2,3,1,2,3], k = 2\n        Output: false\n\n    Constraints:\n        1 <= nums.length <= 10^5\n        -10^9 <= nums[i] <= 10^9\n        0 <= k <= 10^5\n        \n    >>> check_contains_duplicate([1,2,3,1], 3)\n    True\n    >>> check_contains_duplicate([1,0,1,1], 1)\n    True\n    >>> check_contains_duplicate([1,2,3,1,2,3], 2)\n    False\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da4", "type": "code-generate", "prompt": "from typing import List\n\n\ndef summary_ranges(nums: List[int]) -> List[str]:\n    \"\"\" You are given a sorted unique integer array nums. A range [a,b] is the set of all integers\n    from a to b (inclusive).\n\n    Return the smallest sorted list of ranges that cover all the numbers in the array exactly. \n    That is, each element of nums is covered by exactly one of the ranges, and there is no integer \n    x such that x is in one of the ranges but not in nums.\n\n    Each range [a,b] in the list should be output as:\n        - \"a->b\" if a != b\n        - \"a\" if a == b\n    \n    Example 1:\n        Input: nums = [0,1,2,4,5,7]\n        Output: [\"0->2\",\"4->5\",\"7\"]\n        Explanation: The ranges are:\n        [0,2] --> \"0->2\"\n        [4,5] --> \"4->5\"\n        [7,7] --> \"7\"\n\n    Example 2:\n        Input: nums = [0,2,3,4,6,8,9]\n        Output: [\"0\",\"2->4\",\"6\",\"8->9\"]\n        Explanation: The ranges are:\n        [0,0] --> \"0\"\n        [2,4] --> \"2->4\"\n        [6,6] --> \"6\"\n        [8,9] --> \"8->9\"\n    \n    Constraints:\n        0 <= nums.length <= 20\n        -231 <= nums[i] <= 231 - 1\n        All the values of nums are unique.\n        nums is sorted in ascending order.\n        \n    >>> summary_ranges([0,1,2,4,5,7])\n    [\"0->2\",\"4->5\",\"7\"]\n    >>> summary_ranges([0,2,3,4,6,8,9])\n    [\"0\",\"2->4\",\"6\",\"8->9\"]\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da5", "type": "code-generate", "prompt": "\ndef valid_anagram(s: str, t: str) -> bool:\n    \"\"\" Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n\n    Example 1:\n        Input: s = \"anagram\", t = \"nagaram\"\n        Output: true\n\n    Example 2:\n        Input: s = \"rat\", t = \"car\"\n        Output: false\n\n    Constraints:\n        1 <= s.length, t.length <= 5 * 104\n        s and t consist of lowercase English letters.\n        \n    >>> valid_anagram(\"anagram\", \"nagaram\")\n    True\n    >>> valid_anagram(\"rat\", \"car\")\n    False\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da6", "type": "code-generate", "prompt": "from typing import List\n\n\ndef find_missing_number(nums: List[int]) -> int:\n    \"\"\" Given an array nums containing n distinct numbers in the range [0, n], return the only \n    number in the range that is missing from the array.\n    \n    Example 1:\n        Input: nums = [3,0,1]\n        Output: 2\n        Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. \n        2 is the missing number in the range since it does not appear in nums.\n\n    Example 2:\n        Input: nums = [0,1]\n        Output: 2\n        Explanation:\n        n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing \n        number in the range since it does not appear in nums.\n\n    Example 3:\n        Input: nums = [9,6,4,2,3,5,7,0,1]\n        Output: 8\n        Explanation:\n        n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing \n        number in the range since it does not appear in nums.\n\n    Constraints:\n        n == nums.length\n        1 <= n <= 104\n        0 <= nums[i] <= n\n        All the numbers of nums are unique.\n    \n    >>> find_missing_number([3,0,1])\n    2\n    >>> find_missing_number([0,1])\n    2\n    >>> find_missing_number([9,6,4,2,3,5,7,0,1])\n    8\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258da7", "type": "code-generate", "prompt": "from typing import List\n\n\ndef handout_candy(ratings: List[int]) -> int:\n    \"\"\" N children stand in a row. Give you an integer array of ratings for each child's rating.\n    \n    You will need to hand out sweets to these children according to the following requirements:\n        1. Each child is allocated at least 1 candy.\n        2. Children with higher ratings from two children next to each other will get more candy.\n    \n    Please hand out candy to each child. Calculate and return the minimum number of candy that \n    needs to be prepared.\n\n    Example 1:\n        Input: ratings = [1, 0, 2]\n        Output: 5\n        Explanation: You can give 2, 1, or 2 candy to the first, second, and third children.\n    \n    Example 2:\n        Input: ratings = [1, 2, 2]\n        Output: 4\n        Explanation: You can hand out 1, 2, and 1 candy to the first, second and third children.\n        The third child only gets 1 candy, which meets both of the requirements in the title.\n\n    Hint:\n        n == ratings.length\n        1 <= n <= 2 * 104\n        0 <= ratings[i] <= 2 * 104\n    \n    >>> handout_candy([1, 0, 2])\n    5\n    >>> handout_candy([1, 2, 2])\n    4\n    \"\"\"\n    \n"}
{"id": "6824855fb449f90af1258da8", "type": "code-generate", "prompt": "from collections import Counter\n\n\ndef minimum_coverage_substring(s: str, t: str) -> str:\n    \"\"\" Give you a string s, a string t. Returns the smallest substring that covers \n    all characters of t in s. If there is no substring in s that covers all characters \n    of t, the empty string \"\" is returned.\n\n    Note:\n        1. For repeat characters in t, the number of characters in the substring we are \n        looking for must be no less than the number of characters in t.\n        2. If such a substring exists in s, we guarantee that it is the only answer.\n\n    Example 1:\n        Enter s = \"ADOBECODEBANC\", t = \"ABC\".\n        Output: \"BANC\"\n        Explanation: The minimum covering substring \"BANC\" contains 'A', 'B', and 'C' \n        from the string t.\n    \n    Example 2:\n        Enter: s = \"a\", t = \"a\"\n        Output: \"a\"\n        Explanation: The entire string s is the minimum coverage substring.\n    \n    Example 3:\n        Enter: s = \"a\", t = \"aa\"\n        Output: \"\"\n        Explanation: Both characters 'a' in t must be contained in the substring of s,\n        Therefore, there is no substring that meets the condition, and an empty string \n        is returned.\n        \n    Hint:\n        m == s.length\n        n == t.length\n        1 <= m, n <= 105\n        s and t consist of English letters.\n        \n    >>> minimum_coverage_substring(\"ADOBECODEBANC\", \"ABC\")\n    \"BANC\"\n    >>> minimum_coverage_substring(\"a\", \"a\")\n    \"a\"\n    >>> minimum_coverage_substring(\"a\", \"aa\")\n    \"\"\n    \"\"\"\n    \n"}
{"id": "6824855fb449f90af1258da9", "type": "code-generate", "prompt": "from typing import List\n\n\ndef find_median_sorted_arrays(nums1: List[int], nums2: List[int]) -> float:\n    \"\"\" Given two positive (in ascending order) arrays nums1 and nums2 of size m and n, respectively. \n    Please find and return the median of the two positive arrays.\n\n    The time complexity of the algorithm should be O(log (m+n)).\n\n    Example 1:\n        Enter nums1 = [1, 3], nums2 = [2].\n        Output: 2.00000\n        Explanation: Merge array = [1, 2, 3], median 2\n    \n    Example 2:\n        Enter nums1 = [1, 2], nums2 = [3, 4].\n        Output: 2.50000\n        Explanation: Merge array = [1, 2, 3, 4], median (2 + 3)/2 = 2.5\n\n    Hint:\n        nums1.length == m\n        nums2.length == n\n        0 <= m <= 1000\n        0 <= n <= 1000\n        1 <= m + n <= 2000\n        -106 <= nums1[i], nums2[i] <= 106\n    \n    >>> find_median_sorted_arrays([1, 3], [2])\n    2.0\n    >>> find_median_sorted_arrays([1, 2], [3, 4])\n    2.5\n    \"\"\"\n    \n"}
{"id": "6824855fb449f90af1258daa", "type": "code-generate", "prompt": "\ndef base_calculator(s: str) -> int:\n    \"\"\" Give you a string expression s, and ask you to implement a basic calculator \n    to evaluate and return its value.\n\n    Note: Any built-in functions that evaluate strings as mathematical expressions, \n    such as eval(), are not allowed.\n\n    Example 1:\n        Enter: s = \"1 + 1\"\n        Output: 2\n    \n    Example 2:\n        Enter: s = \"2-1 + 2\"\n        Output: 3\n    \n    Example 3:\n        Enter s = \"(1+(4+5+2)-3)+(6+8)\".\n        Output: 23\n\n    Hint:\n        1 <= s.length <= 3 * 105\n        s consists of digits, '+', '-', '(', ')', and''\n        s indicates a valid expression.\n        '+' cannot be used as a unary operation (For example, \"+ 1\" and \"+ (2 + 3)\" are invalid)\n        '-' can be used as a unary operation (i.e. \"-1\" and \"- (2 + 3)) \"is valid)\n        The input does not contain two consecutive operators.\n        Each number and run the calculation will fit a signed 32-bit integer.\n    \n    >>> base_calculator(\"1 + 1\")\n    2\n    >>> base_calculator(\"2-1 + 2\")\n    3\n    >>> base_calculator(\"(1+(4+5+2)-3)+(6+8)\")\n    23\n    \"\"\"\n    \n"}
{"id": "6824855fb449f90af1258dab", "type": "code-generate", "prompt": "from typing import List\n\n\ndef get_h_index(citations: List[int]) -> int:\n    \"\"\" Give you an integer array of citations, where citations[i] represents the number \n    of times the researcher's i-th paper was cited. Calculate and return the investigator's h-index.\n\n    According to the definition of the h index on wikipedia: h stands for \"high citations\", \n    a scientific researcher's h index means that he or she has published at least h papers \n    and at least h papers have been cited more than or equal to h. If h has a number of possible \n    values, the h exponent is the largest of them.\n\n    Example 1:\n        Input: citations = [3, 0, 6, 1, 5]\n        Output: 3\n        Explanation: A given array represents a total of 5 papers, each of which is referenced \n        3, 0, 6, 1, 5 times. Because the researcher had three papers each cited at least three \n        times, and the other two papers each cited no more than three times, her h-index was 3.\n    \n    Example 2:\n        Input: citations = [1, 3, 1]\n        Output: 1\n\n    Hint:\n        n == citations.length\n        1 <= n <= 5000\n        0 <= citations[i] <= 1000\n    \n    >>> get_h_index([3, 0, 6, 1, 5])\n    3\n    >>> get_h_index([1, 3, 1])\n    1\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258dac", "type": "code-generate", "prompt": "from typing import List\n\n\ndef product_except_self(nums: List[int]) -> List[int]:\n    \"\"\" Give you an integer array nums and return the array answer, where answer[i] \n    is equal to the product of all the elements in nums except nums[i].\n\n    The title data ensures that the product of all prefix elements and suffixes \n    of any element in the array nums is within the 32-bit integer range.\n\n    Please do not use division and complete the problem within the O(n) time complexity.\n\n    Example 1:\n        Input: nums = [1, 2, 3, 4]\n        Output: [24, 12, 8, 6]\n    \n    Example 2:\n        Input: nums = [-1, 1, 0, -3, 3]\n        Output: [0, 0, 9, 0, 0]\n\n    Hint:\n        2 <= nums.length <= 105\n        -30 <= nums[i] <= 30\n        Ensure that the array answer[i] is within the 32-bit integer range.\n    \n    >>> product_except_self([1, 2, 3, 4])\n    [24, 12, 8, 6]\n    >>> product_except_self([-1, 1, 0, -3, 3])\n    [0, 0, 9, 0, 0]\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258dad", "type": "code-generate", "prompt": "from typing import List\n\n\ndef integer_to_roman(num: int) -> str:\n    \"\"\" Given an integer, convert it to a Roman numeral.\n    \n    Seven different symbols represent Roman numerals with the following values (Symbol->Value):\n        I->1, V->5, X->10, L->50, C->100, D->500, M->1000\n        \n    Roman numerals are formed by appending the conversions of decimal place values from \n    highest to lowest. Converting a decimal place value into a Roman numeral has the \n    following rules:\n\n    If the value does not start with 4 or 9, select the symbol of the maximal value that\n    can be subtracted from the input, append that symbol to the result, subtract its value,\n    and convert the remainder to a Roman numeral.\n    If the value starts with 4 or 9 use the subtractive form representing one symbol \n    subtracted from the following symbol, for example, 4 is 1 (I) less than 5 (V): IV and \n    9 is 1 (I) less than 10 (X): IX. Only the following subtractive forms are used: \n    4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).\n    Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent \n    multiples of 10. You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need \n    to append a symbol 4 times use the subtractive form.\n    \n    Example 1:\n        Input: num = 3749\n        Output: \"MMMDCCXLIX\"\n        Explanation:\n            3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)\n            700 = DCC as 500 (D) + 100 (C) + 100 (C)\n            40 = XL as 10 (X) less of 50 (L)\n            9 = IX as 1 (I) less of 10 (X)\n            Note: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places\n    \n    Example 2:\n        Input: num = 58\n        Output: \"LVIII\"\n        Explanation:\n            50 = L\n            8 = VIII\n    \n    Example 3:\n        Input: num = 1994\n        Output: \"MCMXCIV\"\n        Explanation:\n            1000 = M\n            900 = CM\n            90 = XC\n            4 = IV\n    \n    Constraints:\n        1 <= num <= 3999\n        \n    >>> integer_to_roman(3749)\n    \"MMMDCCXLIX\"\n    >>> integer_to_roman(58)\n    \"LVIII\"\n    >>> integer_to_roman(1994)\n    \"MCMXCIV\"\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258dae", "type": "code-generate", "prompt": "\ndef reverse_integer(x: int) -> int:\n    \"\"\" Given a signed 32-bit integer x, return x with its digits reversed. If reversing\n    x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then\n    return 0.\n\n    Assume the environment does not allow you to store 64-bit integers (signed or unsigned).\n\n    Example 1:\n        Input: x = 123\n        Output: 321\n    \n    Example 2:\n        Input: x = -123\n        Output: -321\n    \n    Example 3:\n        Input: x = 120\n        Output: 21\n    \n    Constraints:\n        -2^31 <= x <= 2^31 - 1\n    \n    >>> reverse_integer(123)\n    321\n    >>> reverse_integer(-123)\n    -321\n    >>> reverse_integer(120)\n    21\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258daf", "type": "code-generate", "prompt": "\ndef divide_two_integers(dividend: int, divisor: int) -> int:\n    \"\"\" Given two integers dividend and divisor, divide two integers without using multiplication,\n    division, and mod operator.\n    \n    The integer division should truncate toward zero, which means losing its fractional part. For \n    example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\n\n    Return the quotient after dividing dividend by divisor.\n\n    Note: Assume we are dealing with an environment that could only store integers within the 32-bit \n    signed integer range: [-2^31, 2^31 - 1]. For this problem, if the quotient is strictly greater than \n    2^31 - 1, then return 2^31 - 1, and if the quotient is strictly less than -2^31, then return -2^31.\n\n    Example 1:\n        Input: dividend = 10, divisor = 3\n        Output: 3\n        Explanation: 10/3 = 3.33333.. which is truncated to 3.\n    \n    Example 2:\n        Input: dividend = 7, divisor = -3\n        Output: -2\n        Explanation: 7/-3 = -2.33333.. which is truncated to -2.\n    \n    Constraints:\n        -2^31 <= dividend, divisor <= 2^31 - 1\n        divisor != 0\n    \n    >>> divide_two_integers(10, 3)\n    3\n    >>> divide_two_integers(7, -3)\n    -2\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258db0", "type": "code-generate", "prompt": "from typing import List\n\n\ndef nbit_gray_code_sequence(n: int) -> List[int]:\n    \"\"\" Given an integer n, return any valid n-bit gray code sequence.\n    \n    An n-bit gray code sequence is a sequence of 2n integers where:\n        - Every integer is in the inclusive range [0, 2n - 1],\n        - The first integer is 0,\n        - An integer appears no more than once in the sequence,\n        - The binary representation of every pair of adjacent integers differs by exactly one bit, and\n        - The binary representation of the first and last integers differs by exactly one bit.\n    \n    Example 1:\n        Input: n = 2\n        Output: [0, 1, 3, 2]\n        Explanation:\n            The binary representation of [0, 1, 3, 2] is [00, 01, 11, 10].\n            - 00 and 01 differ by one bit\n            - 01 and 11 differ by one bit\n            - 11 and 10 differ by one bit\n            - 10 and 00 differ by one bit\n            [0, 2, 3, 1] is also a valid gray code sequence, whose binary representation is [00, 10, 11, 01].\n            - 00 and 10 differ by one bit\n            - 10 and 11 differ by one bit\n            - 11 and 01 differ by one bit\n            - 01 and 00 differ by one bit\n    \n    Example 2:\n        Input: n = 1\n        Output: [0, 1]\n    \n    Constraints:\n        1 <= n <= 16\n    \n    >>> nbit_gray_code_sequence(2)\n    [0, 1, 3, 2]\n    >>> nbit_gray_code_sequence(1)\n    [0, 1]\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258db1", "type": "code-generate", "prompt": "\ndef multiply_strings(num1: str, num2: str) -> str:\n    \"\"\" Given two non-negative integers num1 and num2 represented as strings, return the product \n    of num1 and num2, also represented as a string.\n\n    Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n\n    Example 1:\n        Input: num1 = \"2\", num2 = \"3\"\n        Output: \"6\"\n    \n    Example 2:\n        Input: num1 = \"123\", num2 = \"456\"\n        Output: \"56088\"\n\n    Constraints:\n        1 <= num1.length, num2.length <= 200\n        num1 and num2 consist of digits only.\n        Both num1 and num2 do not contain any leading zero, except the number 0 itself.\n    \n    >>> multiply_strings(\"2\", \"3\")\n    \"6\"\n    >>> multiply_strings(\"123\", \"456\")\n    \"56088\"\n    \"\"\"\n"}
{"id": "6824855fb449f90af1258db2", "type": "code-generate", "prompt": "\ndef pow_function_impl(x: float, n: int) -> float:\n    \"\"\" Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).\n\n    Example 1:\n        Input: x = 2.00000, n = 10\n        Output: 1024.00000\n    \n    Example 2:\n        Input: x = 2.10000, n = 3\n        Output: 9.26100\n    \n    Example 3:\n        Input: x = 2.00000, n = -2\n        Output: 0.25000\n        Explanation: 2-2 = 1/22 = 1/4 = 0.25\n\n    Constraints:\n        -100.0 < x < 100.0\n        -2^31 <= n <= 2^31-1\n        n is an integer.\n        Either x is not zero or n > 0.\n        -10^4 <= x^n <= 10^4\n    \n    >>> pow_function_impl(2.00000, 10)\n    1024.00000\n    >>> pow_function_impl(2.10000, 3)\n    9.26100\n    >>> pow_function_impl(2.00000, -2)\n    0.25000\n    \"\"\"\n"}
{"id": "68248560b449f90af1258db3", "type": "code-generate", "prompt": "\ndef count_primes(n: int) -> int:\n    \"\"\" Given an integer n, return the number of prime numbers that are strictly less than n.\n\n    Example 1:\n        Input: n = 10\n        Output: 4\n        Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n    \n    Example 2:\n        Input: n = 0\n        Output: 0\n    \n    Example 3:\n        Input: n = 1\n        Output: 0\n    \n    Constraints:\n        0 <= n <= 5 * 10^6\n    \n    >>> count_primes(10)\n    4\n    >>> count_primes(0)\n    0\n    >>> count_primes(1)\n    0\n    \"\"\"\n"}
{"id": "68248560b449f90af1258db4", "type": "code-generate", "prompt": "\ndef find_nth_ugly_number(n: int) -> int:\n    \"\"\" Given an integer n, return the nth ugly number.\n    \n    An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\n\n    Example 1:\n        Input: n = 10\n        Output: 12\n        Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n    \n    Example 2:\n        Input: n = 1\n        Output: 1\n        Explanation: 1 has no prime factors, therefore all of its prime factors are limited \n        to 2, 3, and 5.\n    \n    Constraints:\n        1 <= n <= 1690\n        \n    >>> find_nth_ugly_number(10)\n    12\n    >>> find_nth_ugly_number(1)\n    1\n    \"\"\"\n"}
{"id": "68248560b449f90af1258db5", "type": "code-generate", "prompt": "\ndef integer_break(n: int) -> int:\n    \"\"\" Given an integer n, break it into the sum of k positive integers, where k >= 2,\n    and maximize the product of those integers. Return the maximum product you can get.\n    \n    Example 1:\n        Input: n = 2\n        Output: 1\n        Explanation: 2 = 1 + 1, 1 × 1 = 1.\n    \n    Example 2:\n        Input: n = 10\n        Output: 36\n        Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\n    \n    Constraints:\n        2 <= n <= 58\n    \n    >>> integer_break(2)\n    1\n    >>> integer_break(10)\n    36\n    \"\"\"\n"}
{"id": "68248560b449f90af1258db6", "type": "code-generate", "prompt": "\ndef zigzag_conversion(s: str, numRows: int) -> str:\n    \"\"\" The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of \n    rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\n        P   A   H   N\n        A P L S I I G\n        Y   I   R\n    \n    And then read line by line: \"PAHNAPLSIIGYIR\"\n\n    Write the code that will take a string and make this conversion given a number of rows:\n        string convert(string s, int numRows);\n    \n    Example 1:\n        Input: s = \"PAYPALISHIRING\", numRows = 3\n        Output: \"PAHNAPLSIIGYIR\"\n    \n    Example 2:\n        Input: s = \"PAYPALISHIRING\", numRows = 4\n        Output: \"PINALSIGYAHRPI\"\n        Explanation:\n            P     I    N\n            A   L S  I G\n            Y A   H R\n            P     I\n    \n    Example 3:\n        Input: s = \"A\", numRows = 1\n        Output: \"A\"\n    \n    Constraints:\n        1 <= s.length <= 1000\n        s consists of English letters (lower-case and upper-case), ',' and '.'.\n        1 <= numRows <= 1000\n        \n    >>> zigzag_conversion(\"PAYPALISHIRING\", 3)\n    \"PAHNAPLSIIGYIR\"\n    >>> zigzag_conversion(\"PAYPALISHIRING\", 4)\n    \"PINALSIGYAHRPI\"\n    >>> zigzag_conversion(\"A\", 1)\n    \"A\"\n    \"\"\"\n"}
{"id": "68248560b449f90af1258db7", "type": "code-generate", "prompt": "from typing import List\n\n\ndef generate_parentheses(n: int) -> List[str]:\n    \"\"\" Given n pairs of parentheses, write a function to generate all combinations \n    of well-formed parentheses.\n\n    Example 1:\n        Input: n = 3\n        Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n    \n    Example 2:\n        Input: n = 1\n        Output: [\"()\"]\n    \n    Constraints:\n        1 <= n <= 8\n    >>> generate_parentheses(3)\n    [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n    >>> generate_parentheses(1)\n    [\"()\"]\n    \"\"\"\n"}
{"id": "68248560b449f90af1258db8", "type": "code-generate", "prompt": "from typing import List\n\n\ndef next_permutation(nums: List[int]) -> List[int]:\n    \"\"\" Given an array of integers nums, find the next permutation of nums.\n    \n    A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\n        - For example, for arr = [1, 2, 3], the following are all the permutations of arr: [1, 2, 3], [1, 3, 2], \n        [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].\n    \n    The next permutation of an array of integers is the next lexicographically greater permutation of its integer. \n    More formally, if all the permutations of the array are sorted in one container according to their \n    lexicographical order, then the next permutation of that array is the permutation that follows it in the \n    sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible \n    order (i.e., sorted in ascending order).\n        - For example, the next permutation of arr = [1, 2, 3] is [1, 3, 2].\n        - Similarly, the next permutation of arr = [2, 3, 1] is [3, 1, 2].\n        - While the next permutation of arr = [3, 2, 1] is [1, 2, 3] because [3, 2, 1] does not have a lexicographical \n        larger rearrangement.\n    \n    Example 1:\n        Input: nums = [1, 2, 3]\n        Output: [1, 3, 2]\n    \n    Example 2:\n        Input: nums = [3, 2, 1]\n        Output: [1, 2, 3]\n    \n    Example 3:\n        Input: nums = [1, 1, 5]\n        Output: [1, 5, 1]\n    \n    Constraints:\n        1 <= nums.length <= 100\n        0 <= nums[i] <= 100\n    \n    >>> next_permutation([1, 2, 3])\n    [1, 3, 2]\n    >>> next_permutation([3, 2, 1])\n    [1, 2, 3]\n    >>> next_permutation([1, 1, 5])\n    [1, 5, 1]\n    \"\"\"\n"}
{"id": "68248560b449f90af1258db9", "type": "code-generate", "prompt": "\ndef get_edit_distance(word1: str, word2: str) -> int:\n    \"\"\" Given two strings word1 and word2, return the minimum number of operations required to\n    convert word1 to word2.\n\n    You have the following three operations permitted on a word:\n        - Insert a character\n        - Delete a character\n        - Replace a character\n    \n    Example 1:\n        Input: word1 = \"horse\", word2 = \"ros\"\n        Output: 3\n        Explanation: \n            horse -> rorse (replace 'h' with 'r')\n            rorse -> rose (remove 'r')\n            rose -> ros (remove 'e')\n    \n    Example 2:\n        Input: word1 = \"intention\", word2 = \"execution\"\n        Output: 5\n        Explanation: \n            intention -> inention (remove 't')\n            inention -> enention (replace 'i' with 'e')\n            enention -> exention (replace 'n' with 'x')\n            exention -> exection (replace 'n' with 'c')\n            exection -> execution (insert 'u')\n    \n    Constraints:\n        0 <= word1.length, word2.length <= 500\n        word1 and word2 consist of lowercase English letters.\n        \n    >>> get_edit_distance(\"horse\", \"ros\")\n    3\n    >>> get_edit_distance(\"intention\", \"execution\")\n    5\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dba", "type": "code-generate", "prompt": "from typing import List\n\n\ndef maximum_subarray(nums: List[int]) -> int:\n    \"\"\" Given an integer array nums, find the subarray with the largest sum, and return its sum.\n\n    Example 1:\n        Input: nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n        Output: 6\n        Explanation: The subarray [4, -1, 2, 1] has the largest sum 6.\n    \n    Example 2:\n        Input: nums = [1]\n        Output: 1\n        Explanation: The subarray [1] has the largest sum 1.\n    \n    Example 3:\n        Input: nums = [5, 4, -1, 7, 8]\n        Output: 23\n        Explanation: The subarray [5, 4, -1, 7, 8] has the largest sum 23.\n    \n    Constraints:\n        1 <= nums.length <= 10^5\n        -10^4 <= nums[i] <= 10^4\n    \n    >>> maximum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4])\n    6\n    >>> maximum_subarray([1])\n    1\n    >>> maximum_subarray([5, 4, -1, 7, 8])\n    23\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dbb", "type": "code-generate", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dbc", "type": "code-generate", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dbd", "type": "code-generate", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dbe", "type": "code-generate", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n"}
{"id": "68248560b449f90af1258dbf", "type": "code-generate", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dc0", "type": "code-generate", "prompt": "from typing import List\n\n\ndef has_greater_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Checks for any two numbers greater than the given threshold in a given \n    list of numbers.\n    >>> has_greater_elements([1.0, 2.0, 3.0], 1.5)\n    False\n    >>> has_greater_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 3.2)\n    True\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dc1", "type": "code-generate", "prompt": "from typing import List, Optional\n\n\ndef shortest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the shortest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> shortest([])\n    \n    >>> shortest(['a', 'b', 'c'])\n    'a'\n    >>> shortest(['hhhh', 'bb', 'ccc'])\n    'bb'\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dc2", "type": "code-generate", "prompt": "from typing import List, Tuple\n\n\ndef mean_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a mean-value and a product \n    of all the integers in a list.\n    \n    Note:\n        - Empty mean-value should be equal to 0 and empty product should be equal to 1.\n        - Rounding down the mean-value.\n    \n    >>> mean_product([])\n    (0, 1)\n    >>> mean_product([1, 2, 3, 4])\n    (2, 24)\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dc3", "type": "code-generate", "prompt": "\ndef sort_numbers_descending(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from largest to smallest\n    \n    >>> sort_numbers_descending('three one five')\n    'five three one'\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dc4", "type": "code-generate", "prompt": "\ndef accumulate_to_n(n: int):\n    \"\"\"accumulate_to_n is a function that products numbers from 1 to n.\n    \n    Return -1 when the input parameter n does not meet the constraint condition.\n    \n    Constraints:\n        1 <= n <= 20\n        Return -1, When\n    \n    >>> accumulate_to_n(5)\n    15\n    >>> accumulate_to_n(10)\n    3628800\n    >>> accumulate_to_n(1)\n    1\n    \"\"\"\n"}
{"id": "68248560b449f90af1258dc5", "type": "generic-generate", "prompt": "在一篇文学分析中，提到莎士比亚的《哈姆雷特》中，哈姆雷特的叔叔克劳迪斯毒害了哈姆雷特的父亲，并篡夺了王位。请问克劳迪斯与哈姆雷特的父亲是什么关系？"}
{"id": "68248560b449f90af1258dc6", "type": "generic-generate", "prompt": "在一场10:00开始的足球比赛中，梅西在第75分钟完成了一记精准的任意球破门，帮助阿根廷队以2:1战胜巴西队。请问梅西的进球发生在哪个时间点？"}
{"id": "68248560b449f90af1258dc7", "type": "generic-generate", "prompt": "2022年全球电子废弃物总量为5700万吨，同比增长5%。如果这种增长趋势持续，预计2024年的电子废弃物总量是多少万吨？"}
{"id": "68248560b449f90af1258dc8", "type": "generic-generate", "prompt": "若郑和下西洋始于1405年，最后一次航行结束于1433年，则整个航海活动持续了多少年？"}
{"id": "68248560b449f90af1258dc9", "type": "generic-generate", "prompt": "某实验初始温度25°C，每小时下降3°C，6小时后温度是多少？"}
{"id": "68248560b449f90af1258dca", "type": "generic-generate", "prompt": "《论语·为政》记载孔子提出'三十而立，四十不惑'的人生阶段论，其中'而立'指多少岁？"}
{"id": "68248560b449f90af1258dcb", "type": "generic-generate", "prompt": "运送物资，第一次派出10辆A车，第二次增派15辆B车，运输量比第一次高50%。那么每辆A车的载货量是B车的多少倍？"}
{"id": "68248560b449f90af1258dcc", "type": "generic-generate", "prompt": "弗莱德里克·肖邦出生在华沙以西46公里的埃拉佐瓦·沃拉，当时的华沙公国是拿破仑建立的波兰国家。教区的洗礼记录将他的生日定为1810年2月22日，并以拉丁语形式引用了他的名字Fridericus Franciscus。然而，作曲家和他的家人使用的生日是3月1日，现在普遍认为这是正确的日期。根据以上内容回答华沙公国是谁建立的？"}
{"id": "68248560b449f90af1258dcd", "type": "generic-generate", "prompt": "弗莱德里克·肖邦出生在华沙以西46公里的埃拉佐瓦·沃拉，当时的华沙公国是拿破仑建立的波兰国家。教区的洗礼记录将他的生日定为1810年2月22日，并以拉丁语形式引用了他的名字Fridericus Franciscus。然而，作曲家和他的家人使用的生日是3月1日，现在普遍认为这是正确的日期。根据以上内容回答肖邦的出生地埃拉佐瓦·沃拉位于华沙的哪个方向？"}
{"id": "68248560b449f90af1258dce", "type": "generic-generate", "prompt": "西藏曾是与唐朝同时代的强国。在9世纪西藏帝国崩溃之前，它一直是唐朝统治内亚的主要对手。西藏雅鲁藏布江统治者还与唐朝签订了多项和平条约，最终在821年签订了一项条约，确定了西藏与中国的边界。请问西藏帝国在哪个世纪灭亡了？"}
{"id": "68248560b449f90af1258dcf", "type": "generic-generate", "prompt": "游戏有16个地下城，包含了与敌人战斗、收集物品和解决谜题的区域。地牢是通过一个巨大的超世界连接起来的，在这个世界上可以徒步旅行、骑马或者传送。那么这个游戏一共有几个地下城？"}
{"id": "68248560b449f90af1258dd0", "type": "generic-generate", "prompt": "《天蝎座》是于文文在2024年发行的第五张个人音乐创作专辑，由索尼音乐发行，共收录了10首歌曲。那么截至2024年于文文一共发行过几张个人专辑？"}
{"id": "68248560b449f90af1258dd1", "type": "generic-generate", "prompt": "美洲豹队以15比1的战绩结束了常规赛，四分卫牛顿被评为全美橄榄球联盟最有价值球员（MVP）。他们在NFC锦标赛中以49比15击败了亚利桑那红衣主教队，并晋级自1995年球队成立以来的第二次超级杯。野马队以12胜4负的战绩结束了常规赛，并在亚足联冠军赛中以20胜18负击败了新英格兰爱国者队，剥夺了他们从第四十九届超级杯卫冕的机会。他们加入了爱国者队、达拉斯牛仔队和匹兹堡钢人队，成为四支在超级碗中出场八次的球队之一。提问：丹佛野马队在超级杯上出场了多少次？"}
{"id": "68248560b449f90af1258dd2", "type": "generic-generate", "prompt": "在爱尔兰，私立学校不常见，政府只会支付固定数量教师的薪酬。学校如果想雇佣额外的教师，他们需要支付薪酬。与世界其他地区相比，爱尔兰的学费往往相对较低，但爱尔兰的许多私立学校学费是寄宿学校的两倍。大多数学校的平均年费约为5000欧元，但其中一些学校也提供寄宿，费用可能会上升到每年25000欧元。由此可知，爱尔兰私立学校的典型年学费是多少？"}
{"id": "68248560b449f90af1258dd3", "type": "generic-generate", "prompt": "Coming off their road win over the Lions, the Steelers went home for a divisional match with the Cleveland Browns. After a scoreless first quarter, Pittsburgh came out striking in the second quarter as quarterback Ben Roethlisberger completed an 8-yard touchdown pass to tight end Heath Miller and a 52-yard touchdown pass to wide receiver Hines Ward. The Browns immediately struck back as wide receiver Joshua Cribbs returned a kickoff 98&#160;yards for a touchdown. Pittsburgh would close out the half with a 32-yard field goal from kicker Jeff Reed. Cleveland tried to catch up as quarterback Derek Anderson completed a 1-yard touchdown pass to fullback Lawrence Vickers, yet the Steelers answered with a 2-yard touchdown run from running back Rashard Mendenhall. Pittsburgh would then close the game out in the fourth quarter with Reed kicking a 39-yard field goal. With their 12th-straight win over the Browns, the Steelers improved to 4-2. With the Ravens' loss to the Vikings, and the Bengals' loss to the Texans that same week, the Steelers are now tied with the Bengals at the top of the AFC North.How many yards was the games longest TD?"}
{"id": "68248560b449f90af1258dd4", "type": "generic-generate", "prompt": "Trying to snap a two-game losing streak, the Packers went home for a Week 10 duel with the Dallas Cowboys. Green Bay would get the only points of the first half in the form of a 48-yard field goal from kicker Mason Crosby. After a scoreless third quarter, the Packers would take a huge lead in the fourth quarter with quarterback Aaron Rodgers' 1-yard touchdown run and his 2-yard touchdown pass to tight end Spencer Havner. The Cowboys would try to rally with quarterback Tony Romo's 9-yard touchdown pass to wide receiver Roy Williams, Green Bay's defense would hold strong for a huge victory. With the win, not only do the Packers improved to 5-4, but also the Packers finally beat Dallas for revenge after 5 years of losing since their meeting with the Cowboys in 2004.So, who was the first player to receive a touchdown pass?"}
{"id": "68248560b449f90af1258dd5", "type": "generic-generate", "prompt": "The other magazine, The Juggler, is released twice a year and focuses on student literature and artwork.How often is Notre Dame's the Juggler published?"}
{"id": "68248560b449f90af1258dd6", "type": "generic-generate", "prompt": "This changed in 1924 with formal requirements developed for graduate degrees, including offering Doctorate (PhD) degrees. The granting of Doctorate degrees first occurred in what year at Notre Dame?"}
{"id": "68248560b449f90af1258dd7", "type": "generic-generate", "prompt": "In his native Poland, in France, where he composed most of his works, and beyond, Chopin's music, his status as one of music's earliest superstars, his association (if only indirect) with political insurrection, his love life and his early death have made him, in the public consciousness, a leading symbol of the Romantic era. Where did Chopin create the majority of his compositions?"}
{"id": "68248560b449f90af1258dd8", "type": "generic-generate", "prompt": "传统上，离网光伏系统使用可充电电池储存多余的电能。有了并网系统，多余的电力可以输送到输电网，而标准的电网电力可以用来满足短缺。净计量计划为家庭系统向电网输送的电力提供了信用。当家庭产生的电量超过其消耗的电量时，这是通过“向后滚动”电表来实现的。离网光伏系统用来储存多余的电能是什么？"}
{"id": "68248560b449f90af1258dd9", "type": "generic-generate", "prompt": "《春江花月夜》是唐代诗人张若虚创作的七言歌行，最早收录于郭茂倩编撰的《乐府诗集》中。此诗沿用陈隋乐府旧题，运用富有生活气息的清丽之笔，以江为场景，以月为主体，描绘了一幅幽美邈远、惝恍迷离的春江月夜图。《乐府诗集》的作者是谁？"}
{"id": "68248560b449f90af1258dda", "type": "generic-generate", "prompt": "张若虚（约660—约720），唐代诗人。扬州（今属江苏）人。官兖州兵曹。与贺知章、张旭、包融齐名，号称“吴中四士”。事迹略见于《旧唐书·贺知章传》。《全唐诗》仅存其诗二首。张若虚大概活了多少年？"}
{"id": "68248560b449f90af1258ddb", "type": "generic-generate", "prompt": "A食品的配料表包括：水（70%）、浓缩咖啡液（10%）、白砂糖（10%）、实用香精（10%），则A的最主要的配料为？"}
{"id": "68248560b449f90af1258ddc", "type": "generic-generate", "prompt": "科学记数法又称科学记号或科学记法，是一种记录或标志数的科学表示法，可用来表示由于太大或太小而不能方便地用十进制表示的数，因为这样做需要写出一串异常长的数字。科学家、数学家和工程师普遍使用这种以10为底数的表示法，部分原因是它可以简化某些算术运算。在科学计算器上，通常使用“SCI”作为显示模式。科学记数法最早由阿基米德提出。科学记数法在科学计算器上的显示模式通常为？"}
{"id": "68248560b449f90af1258ddd", "type": "generic-generate", "prompt": "美国籍枢机罗伯特·方济各·普雷沃斯特经秘密会议4轮选举，当选为教宗良十四世。教宗良十四世的国籍为？"}
{"id": "68248560b449f90af1258dde", "type": "generic-generate", "prompt": "巴西帝国皇储伊莎贝尔签署法令废除奴隶制度，也是最后一个废除奴隶制度的西方国家。谁签署了法令废除奴隶制度？"}
{"id": "68248560b449f90af1258ddf", "type": "generic-generate", "prompt": "中台世界博物馆为一间以佛教文物为主题之博物馆。设立于南投县埔里镇中台禅寺旁，2009年10月3日中台山博物馆开馆，2012年8月中台世界博物馆动土奠基大典，2016年8月13日中台世界博物馆开幕。创办人为惟觉老和尚，其宗旨在于为弘宗演教，落实“佛法艺术化”，保存佛教历史文化，进而承继、研究、发扬佛教艺术。常设展有近两百件汉传、藏传与南传三大地区历代佛教文物，并以石雕造像为主轴。特展举办有“地涌天宝──浙江省博物馆珍品特展”、“烟霞供养──馆藏佛教绘画暨传统书画展”、“石墨真宝－西安碑林博物馆碑拓特展”等。仿唐代长安古城建筑，地下二层、地上三层，展示面积广达五千坪，多达十八个展厅，珍藏展出历代珍贵佛教文物。中台世界博物馆的主题是？"}
{"id": "68248560b449f90af1258de0", "type": "generic-generate", "prompt": "启功（1912年7月26日—2005年6月30日），爱新觉罗氏，字元白（或作元伯），满族正蓝旗人，中国古典文献学家、书法家。清世宗嫡派后裔，封爵奉恩将军。幼孤，自称学习上得益于姑姑甚多。启功全名是？"}
{"id": "68248560b449f90af1258de1", "type": "generic-generate", "prompt": "阿特金斯饮食法是一个声称具有减肥功效的伪科学饮食方法，由美国医生罗伯特·阿特金斯于1970年提出。他认为减重的关键是限制碳水化合物的摄取，而可以吃高蛋白的食品，而多吃肉类、鱼，类似生酮饮食，从而将人体从消耗碳水化合物的代谢转化成以消耗脂肪为主的代谢模式。阿特金斯饮食法没有足够的证据支撑其在减肥方面的有效性。近年来也作为多种疾病如癫痫的可能性疗法。阿特金斯饮食法是哪年被提出的？"}
{"id": "68248560b449f90af1258de2", "type": "generic-generate", "prompt": "全天断食法包括定期断食一整天。最严格的形式是隔日断食（ADF, Alternate-day fasting），也就是24小时断食，然后接着进入24小时非断食期，不断循环。改良版隔日断食（ADMF）和5：2饮食 - 后者定义为每周五天不断食，每周两天进行断食或改良的断食。在禁食期间，可以允许消耗大约500到700卡路里的热量，或大约25%的每日常规卡路里摄入量，而不是完全禁食。隔日断食的非断食期是几个小时？"}
{"id": "68248560b449f90af1258de3", "type": "generic-generate", "prompt": "在美国豆浆曾经长期为最流行之非动物奶，大约从2010年起杏仁奶开始扩大流行，并于2013年超越豆浆成为流行之最。其他在美国流行的植物奶有米浆和椰奶。在欧洲豆浆和燕麦奶较普遍，其他还有大麻籽奶、腰果奶、榛果奶，还有由豌豆和羽扇豆制成的奶。杏仁奶哪一年在美国成为最流行的非动物奶？"}
{"id": "68248560b449f90af1258de4", "type": "generic-generate", "prompt": "弗朗切斯科·里奇·比蒂于1993年至1999年担任欧洲网球联合会主席。请问他一共担任了几年欧洲网球联合会主席？"}
{"id": "68248560b449f90af1258de5", "type": "generic-generate", "prompt": "东汉末年，张道陵在西南蜀地益州（在今成都）称得太上老君（老子）“授以三天正法，命为天师”，从而创立了正一道（又称天师道、五斗米道）。在中原，也有张角创立了太平道，宣称“苍天已死，黄天当立”，组织民众起事反抗东汉王朝（史称黄巾之乱或黄巾起义）。正一道和太平道的出现，标志着道教开始成为有严密思想体系和组织制度的宗教。在这种社会背景下，订定道教经书的主要创始人物张道陵综合传统的鬼神崇拜、神仙思想、阴阳术数、卜筮巫术，并与汉代所崇尚黄老道思潮逐渐融合。道教教派也于此时形成，道教的宗教形态初具。那么，是谁创立了太平道？"}
{"id": "68248560b449f90af1258de6", "type": "generic-generate", "prompt": "在洋中脊上涌的地幔物质形成新的洋底，大约耗用50my从摄氏1000度冷却到平衡态并下沉到最大深度。最大的洋底是太平洋板块，大约运动速度10cm/yr。冷却的大洋地壳容易变质为榴辉岩，比幔岩的密度更大。太平洋板块的大约运动速度是多少？"}
{"id": "68248560b449f90af1258de7", "type": "generic-generate", "prompt": "中国大陆从1950年代末开始研究地名标准化，并从综合研究地名产生、发展和分布规律，于1977年成立中国地名委员会。此委员会于1998年所编之《外国地名译名手册》是中国翻译外国地名的主要根据。另外，地名委员会所编之《外国地名汉字译写通则》也十分重要。中国翻译外国地名的主要根据是哪本书？"}
{"id": "68248560b449f90af1258de8", "type": "generic-generate", "prompt": "EOS R50是目前最轻的EOS R系列相机，重量仅375克，它具备无裁切6K超取样4K30p短片功能，可拍摄出高清影片；“近拍展示”模式则可拍摄产品或料理特写。此外，EOS R50还提供“创意包围”和“进阶A+”等功能，让使用者得以拍出具艺术效果照片。目前最轻的EOS R系列相机有多少克？"}
{"id": "68248560b449f90af1258de9", "type": "generic-generate", "prompt": "《东京公园》全片以公园作为情节发展的主要舞台，看似平凡平行的人物际遇，都在公园中交错互动，提供心灵交流的稳定力量，对比于现代人的疏离焦虑，也成为另一种天堂般的理想桃花源。这是一部青山真治执导的日本电影，2011年6月18日上映。由三浦春马、荣仓奈奈等主演。荣获罗加诺国际电影节金豹奖评审员特别奖。东京公园》的导演是谁？"}
{"id": "68248560b449f90af1258dea", "type": "generic-generate", "prompt": "18世纪末到19世纪初，著名的音乐家海顿，莫扎特和年轻的贝多芬都在古钢琴这种乐器上写下他们的钢琴音乐。从1782年左右，莫扎特一直都为古钢琴这种乐器作曲。自1785年起，他亦以古钢琴作为主要表演的项目，直至他1791年去世为止。他所用的古钢琴，是莫扎特时代最著名的维也纳钢琴制造商之一安顿·瓦尔特所制作的。该古钢琴现永久存放在萨尔茨堡市的莫扎特博物馆之内。海顿也拥有瓦尔特钢琴，贝多芬也曾表示希望购买一架。从贝多芬的时代开始，古钢琴开始了一个稳定演变的时期，直至到19世纪末现代三角钢琴出现为止。莫扎特是哪年去世的？"}
{"id": "68248560b449f90af1258deb", "type": "generic-generate", "prompt": "1912年2月华商电车有限公司成立，设于南市沪杭车站路（今南车站路），集股20万元。民国6年（1917年）初，身兼商办上海内地电灯有限公司、上海华商电车有限公司2家公司总经理的陆伯鸿，为方便经营管理，提出车、灯合并的建议。经过2家公司的董事会反复讨论，于翌年1月7日正式合并为上海华商电气股份有限公司。1937年12月30日，总经理陆伯鸿遇刺身亡，公司停业。上海华商电气股份有限公司成立的具体日期是？"}
{"id": "68248560b449f90af1258dec", "type": "generic-generate", "prompt": "尽管世界各地有许多通讯社，但全球最大的三家通讯社则分别是：美联社、路透社和法新社。这三大通讯社在全球各地区均设有办事处，报道范围涵盖所有领域。这三大通讯社都遵循同一理念，即向所有订阅用户提供统一的客观的新闻内容；同时拒绝向保守派或自由派新闻机构提供额外的不同的新闻报道。英国记者兼分析家乔纳森·芬比是如此阐释这一理念的。全球最大的三家通讯社是美联社、路透社和哪一家？"}
{"id": "68248560b449f90af1258ded", "type": "generic-generate", "prompt": "四大文明古国为华人地区对四大古文明的旧称，中文圈简单地把“古巴比伦、古埃及、古中国、古印度”看做世界四大文明古国。按照先后顺序排列为“美索不达米亚→埃及→印度→中国”。西方历史学上，比起四大文明古国，则采用“文明摇篮”这一说法，西方学者们认为除了欧亚大陆的四个河流文明发源地以外，另外在美洲还有两个，即位于现代墨西哥的玛雅文明，以及位于现代秘鲁的印加文明，但不以四大古文明、或者六大古文明称呼之，因为爱琴海文明等文明，因影响了西方文明，也可以符合“文明摇篮”的定义。世界四大文明古国按照先后顺序排列最先出现的是？"}
{"id": "68248560b449f90af1258dee", "type": "generic-generate", "prompt": "小明去文具店买了3支钢笔，每支钢笔12元，又买了一个笔记本花了8元。他一共花了多少钱？"}
{"id": "68248560b449f90af1258def", "type": "generic-generate", "prompt": "化学实验中，每升溶液需加入0.15克催化剂。若配制25升溶液，需多少克催化剂？"}
{"id": "68248560b449f90af1258df0", "type": "generic-generate", "prompt": "国际会议从北京时间9:15开始，持续2小时50分钟。会议结束时是几点？"}
{"id": "68248560b449f90af1258df1", "type": "generic-generate", "prompt": "The show has received recognition as one of Britain's finest television programmes, winning the 2006 British Academy Television Award for Best Drama Series and five consecutive (2005–2010) awards at the National Television Awards during Russell T Davies' tenure as executive producer. In 2011, Matt Smith became the first Doctor to be nominated for a BAFTA Television Award for Best Actor and in 2016, Michelle Gomez became the first female to receive a BAFTA nomination for the series, getting a Best Supporting Actress nomination for her work as Missy. What Doctor Who actress was nominated for an award in 2016?"}
{"id": "68248560b449f90af1258df2", "type": "generic-generate", "prompt": "The English name 'Normans' comes from the French words Normans/Normanz, plural of Normant, modern French normand, which is itself borrowed from Old Low Franconian Nortmann 'Northman' or directly from Old Norse Norðmaðr, Latinized variously as Nortmannus, Normannus, or Nordmannus (recorded in Medieval Latin, 9th century) to mean 'Norseman, Viking'. When was the Latin version of the word Norman first recorded?"}
{"id": "68248560b449f90af1258df3", "type": "generic-generate", "prompt": "Pattern recognition receptors are proteins used by nearly all organisms to identify molecules associated with pathogens. Antimicrobial peptides called defensins are an evolutionarily conserved component of the innate immune response found in all animals and plants, and represent the main form of invertebrate systemic immunity. The complement system and phagocytic cells are also used by most forms of invertebrate life. Ribonucleases and the RNA interference pathway are conserved across all eukaryotes, and are thought to play a role in the immune response to viruses. What cell type is also used for immune response in most types of invertebrate life?"}
{"id": "68248560b449f90af1258df4", "type": "generic-generate", "prompt": "Far from being a mere 'stopgap' pope, to great excitement, John XXIII called for an ecumenical council fewer than ninety years after the First Vatican Council (Vatican I's predecessor, the Council of Trent, had been held in the 16th century). This decision was announced on 29 January 1959 at the Basilica of Saint Paul Outside the Walls. Cardinal Giovanni Battista Montini, who later became Pope Paul VI, remarked to Giulio Bevilacqua that 'this holy old boy doesn't realise what a hornet's nest he's stirring up'. From the Second Vatican Council came changes that reshaped the face of Catholicism: a comprehensively revised liturgy, a stronger emphasis on ecumenism, and a new approach to the world. Who did Cardinal Giovanni Battista Montini later become?"}
{"id": "68248560b449f90af1258df5", "type": "generic-generate", "prompt": "Jidaigeki (literally historical drama) has always been a staple program on Japanese movies and television. The programs typically feature a samurai. Samurai films and westerns share a number of similarities and the two have influenced each other over the years. One of Japan’s most renowned directors, Akira Kurosawa, greatly influenced the samurai aspect in western film-making.George Lucas’ Star Wars series incorporated many aspects from the Seven Samurai film. One example is that in the Japanese film, seven samurai warriors are hired by local farmers to protect their land from being overrun by bandits; In George Lucas’ Star Wars: A New Hope, a similar situation arises. Kurosawa was inspired by the works of director John Ford and in turn Kurosawa's works have been remade into westerns such as The Seven Samurai into The Magnificent Seven and Yojimbo into A Fistful of Dollars. There is also a 26 episode anime adaptation (Samurai 7) of The Seven Samurai. Along with film, literature containing samurai influences are seen as well. Who directed 'Seven Samurai'?"}
{"id": "68248560b449f90af1258df6", "type": "generic-generate", "prompt": "According to CIA World Factbook, the people of Republic of the Congo are largely a mix of Catholics (33.1%), Awakening Lutherans (22.3%) and other Protestants (19.9%). Followers of Islam make up 1.6%, and this is primarily due to an influx of foreign workers into the urban centers. What percentage of Congolese citizens identify as Awakening Lutherans?"}
{"id": "6824860bb449f911e6d59507", "type": "math", "prompt": "If $f(x) = \\frac{3x-2}{x-2}$, what is the value of $f(-2) +f(-1)$? Express your answer as a common fraction."}
{"id": "6824860bb449f911e6d59508", "type": "math", "prompt": "A regular hexagon can be divided into six equilateral triangles. If the perimeter of one of the triangles is 18 inches, what is the perimeter, in inches, of the regular hexagon?"}
{"id": "6824860bb449f911e6d59509", "type": "math", "prompt": "In right triangle $ABC$ with $\\angle B = 90^\\circ$, we have $\\sin A = 2\\cos A$. What is $\\tan A$?"}
{"id": "6824860bb449f911e6d5950a", "type": "math", "prompt": "Evaluate $\\lceil{\\sqrt{21}}\\rceil^2$."}
{"id": "6824860bb449f911e6d5950b", "type": "math", "prompt": "Find $\\prod_{n=2}^{\\infty}\\left(1-\\frac{1}{n^{2}}\\right)$."}
{"id": "6824860bb449f911e6d5950c", "type": "math", "prompt": "Find the value of $\\log_2{3} \\cdot \\log_3{4} \\cdot \\log_4{5} \\cdot \\log_5{6} \\cdot \\log_6{7} \\cdot \\log_7{8}$."}
{"id": "6824860bb449f911e6d5950d", "type": "math", "prompt": "Solve for x: 3x + 5 = 17."}
{"id": "6824860bb449f911e6d5950e", "type": "math", "prompt": "Solve for $x$, if $8^{4x-6}=\\left(\\frac{1}{2}\\right)^{x+5}$."}
{"id": "6824860bb449f911e6d5950f", "type": "math", "prompt": "If $x - 2x + 3x = 50$, what is the value of $x$?"}
{"id": "6824860bb449f911e6d59510", "type": "math", "prompt": "Find the integer $n,$ $-90 \\le n \\le 90,$ such that $\\sin n^\\circ = \\sin 417^\\circ.$"}
{"id": "6824860bb449f911e6d59511", "type": "math", "prompt": "What is the value of $\\sqrt{3^3 + 3^3 + 3^3}$?"}
{"id": "6824860bb449f911e6d59512", "type": "math", "prompt": "If $y = 7 - 5x +4x^2$, what is the value of $y$ when $x=-2$?"}
{"id": "6824860bb449f911e6d59513", "type": "math", "prompt": "Solve $\\frac{9-4x}{x+6}=7$ for $x$."}
{"id": "6824860bb449f911e6d59514", "type": "math", "prompt": "Compute $\\cos 120^\\circ$."}
{"id": "6824860bb449f911e6d59515", "type": "math", "prompt": "$3^n = 3 \\cdot 9^3 \\cdot 81^2$. What is the value of $n$?"}
{"id": "6824860bb449f911e6d59516", "type": "math", "prompt": "Let $a_{0}, a_{1}, a_{2}, \\ldots$ denote the sequence of real numbers such that $a_{0}=2$ and $a_{n+1}=\\frac{a_{n}}{1+a_{n}}$ for $n \\geq 0$. Compute $a_{2025}$."}
{"id": "6824860bb449f911e6d59517", "type": "math", "prompt": "Let $x, y$, and $z$ be positive real numbers such that $(x \\cdot y)+z=(x+z) \\cdot(y+z)$. What is the maximum possible value of $x y z$?"}
{"id": "6824860bb449f911e6d59518", "type": "math", "prompt": "Compute $\\sum_{n=1}^{\\infty} \\sum_{k=1}^{n-1} \\frac{k}{2^{n+k}}$."}
{"id": "6824860bb449f911e6d59519", "type": "math", "prompt": "Let $x, y$, and $z$ be distinct real numbers that sum to 0. Find the maximum possible value of $$\\frac{x y+y z+z x}{x^{2}+y^{2}+z^{2}}$$"}
{"id": "6824860bb449f911e6d5951a", "type": "math", "prompt": "$p$ and $q$ are primes such that the numbers $p+q$ and $p+7 q$ are both squares. Find the value of $p$."}
{"id": "6824860bb449f911e6d5951b", "type": "math", "prompt": "Let $a$ and $b$ be relatively prime positive integers such that $\\dfrac ab=\\dfrac1{2^1}+\\dfrac2{3^2}+\\dfrac3{2^3}+\\dfrac4{3^4}+\\dfrac5{2^5}+\\dfrac6{3^6}+\\cdots$, where the numerators always increase by $1$, and the denominators alternate between powers of $2$ and $3$, with exponents also increasing by $1$ for each subsequent term. Compute $a+b$."}
{"id": "6824860bb449f911e6d5951c", "type": "math", "prompt": "Evaluate $$\\sin \\left(1998^{\\circ}+237^{\\circ}\\right) \\sin \\left(1998^{\\circ}-1653^{\\circ}\\right)$$"}
{"id": "6824860bb449f911e6d5951d", "type": "math", "prompt": "Calculate $\\frac{3 \\cdot 5! + 15\\cdot 4!}{6!}$"}
{"id": "6824860bb449f911e6d5951e", "type": "math", "prompt": "For what real value of $v$ is $\\frac{-21-\\sqrt{301}}{10}$ a root of $5x^2+21x+v$?"}
{"id": "6824860bb449f911e6d5951f", "type": "math", "prompt": "Let $d$ be a randomly chosen divisor of 2025. Find the expected value of $\\frac{d^{2}}{d^{2}+2025}$."}
{"id": "6824860bb449f911e6d59520", "type": "math", "prompt": "Let $a, b, c, n$ be positive real numbers such that $\\frac{a+b}{a}=3, \\frac{b+c}{b}=4$, and $\\frac{c+a}{c}=n$. Find $n$."}
{"id": "6824860bb449f911e6d59521", "type": "math", "prompt": "解方程 -5x + 36 = 0"}
{"id": "6824860bb449f911e6d59522", "type": "math", "prompt": "If $x+\\frac{1}{y}=1$ and $y+\\frac{1}{z}=1$, what is the value of the product $xyz$?"}
{"id": "6824860bb449f911e6d59523", "type": "math", "prompt": "If $|x-2|=p$, where $x<2$, then what is $x-p$ in terms of $p$?"}
{"id": "6824860bb449f911e6d59524", "type": "math", "prompt": "If the straight line $$(x+y+1)+K(2x-y-1)=0$$ is perpendicular to $$2x+3y-8=0$$ then K = ?"}
{"id": "6824860bb449f911e6d59525", "type": "math", "prompt": "Two geometric sequences $a_1, a_2, a_3, \\ldots$ and $b_1, b_2, b_3, \\ldots$ have the same common ratio, with $a_1 = 27$, $b_1=99$, and $a_{15}=b_{11}$. Find $a_9.$"}
{"id": "6824860bb449f911e6d59526", "type": "math", "prompt": "The three points A, B, C form a triangle. AB=4, BC=5, AC=6. Let the angle bisector of \\angle A intersect side BC at D. Let the foot of the perpendicular from B to the angle bisector of \\angle A be E. Let the line through E parallel to AC meet BC at F. Compute DF."}
{"id": "6824860bb449f911e6d59527", "type": "math", "prompt": "In triangle $A B C, \\angle B A C=60^{\\circ}$. Let $\\omega$ be a circle tangent to segment $A B$ at point $D$ and segment $A C$ at point $E$. Suppose $\\omega$ intersects segment $B C$ at points $F$ and $G$ such that $F$ lies in between $B$ and $G$. Given that $A D=F G=4$ and $B F=\\frac{1}{2}$, find the length of $C G$."}
{"id": "6824860bb449f911e6d59528", "type": "math", "prompt": "Find the number of positive solutions to $\\sin(\\arccos(\\tan(\\arcsin x))) = x.$"}
{"id": "6824860bb449f911e6d59529", "type": "math", "prompt": "A complete cycle of a traffic light takes 60 seconds. During each cycle the light is green for 25 seconds, yellow for 5 seconds, and red for 30 seconds. At a randomly chosen time, what is the probability that the light will NOT be green? Express your answer as a common fraction."}
{"id": "6824860bb449f911e6d5952a", "type": "math", "prompt": "We know that $4 = 2^{5r+1}$. What is the value of $r$?"}
{"id": "6824860bb449f911e6d5952b", "type": "math", "prompt": "Find $\\tan \\frac{9 \\pi}{4}.$"}
{"id": "6824860bb449f911e6d5952c", "type": "math", "prompt": "How many units long is a segment whose endpoints are (2,3) and (7,15)?"}
{"id": "6824860bb449f911e6d5952d", "type": "math", "prompt": "A right, rectangular prism has three faces with areas of $6,8$ and $12$ square inches. What is the volume of the prism, in cubic inches?"}
{"id": "6824860bb449f911e6d5952e", "type": "math", "prompt": "Let $x$ and $y$ be real numbers, $y > x > 0,$ such that $\\frac{x}{y} + \\frac{y}{x} = 6.$ Find the value of $\\frac{x + y}{x - y}.$"}
{"id": "6824860cb449f911e6d5952f", "type": "math", "prompt": "How many numbers are in the list $$ 1.5, 5.5, 9.5, 13.5, \\ldots, 41.5, 45.5? $$"}
{"id": "6824860cb449f911e6d59530", "type": "math", "prompt": "If $1+2x+3x^2 + \\dotsb=9$, find $x$."}
{"id": "6824860cb449f911e6d59531", "type": "math", "prompt": "Two fair six-sided dice are rolled. What is the probability that their sum is at least 10?"}
{"id": "6824860cb449f911e6d59532", "type": "math", "prompt": "A list of five positive integers has a median of 3 and a mean of 11. What is the maximum possible value of the list's largest element?"}
{"id": "6824860cb449f911e6d59533", "type": "math", "prompt": "Evaluate $\\log_432$."}
{"id": "6824860cb449f911e6d59534", "type": "math", "prompt": "Let $z = \\frac{-\\sqrt{3} + i}{2}.$ Compute $z^6.$"}
{"id": "6824860cb449f911e6d59535", "type": "math", "prompt": "Given that the point $(8,8)$ is on the graph of $y=\\frac 14f\\left(\\frac 12x\\right)$, there is one point that must be on the graph of $y=f(x)$. What is the sum of coordinates of that point?"}
{"id": "6824860cb449f911e6d59536", "type": "math", "prompt": "Let $p, q, r$ be primes such that $2 p+3 q=6 r$. Find $p+q+r$."}
{"id": "6824860cb449f911e6d59537", "type": "math", "prompt": "The sides of a triangle with positive area have lengths 4, 6, and $x$. The sides of a second triangle with positive area have lengths 4, 6, and $y$. What is the smallest positive number that is $\\textbf{not}$ a possible value of $|x-y|$?"}
{"id": "6824860cb449f911e6d59538", "type": "math", "prompt": "Express $(5-4i)-2(3+6i)$ as a complex number."}
{"id": "682486fbb449f91b8372ddac", "type": "choice", "prompt": "某市老旧小区电力改造工程，甲工程队单独施工需12天，乙工程队单独施工需18天。现计划两队共同施工，但施工期间遭遇以下情况：①共同施工3天后因暴雨停工2天；②复工后甲队增派50%人手效率提升50%，乙队人数不变。问完成全部工程至少需要多少天？", "choices": {"A": "9天", "B": "10天", "C": "11天", "D": "12天"}}
{"id": "682486fbb449f91b8372ddad", "type": "choice", "prompt": "某机关档案室需同时保管纸质公文和电子文档备份硬盘，下列管理措施中最符合《机关档案管理规定》和科学原理的是：", "choices": {"A": "夏季采用紫外线灯对受潮纸质档案进行每日消毒处理", "B": "将备用打印机碳粉存放于30℃恒温箱保持干燥", "C": "维持库房温度16-20℃、相对湿度45%-55%区间", "D": "允许电子存储介质区域单日温度波动超过±8℃"}}
{"id": "682486fbb449f91b8372ddae", "type": "choice", "prompt": "某市环保局规定：若企业项目符合《环保标准》（条件A），则需提交初审报告（条件B）；只有通过初审（条件B），方可组织专家评审（条件C）；专家评审通过（条件C）是项目提交局长办公会（结论D）的必要条件。现某项目已进入局长办公会议程，据此可推出：", "choices": {"A": "该项目必须符合《环保标准》", "B": "该项目通过安全风险预评估", "C": "专家评审通过的项目可直接上会", "D": "所有提交局长办公会的项目都符合《环保标准》"}}
{"id": "682486fbb449f91b8372ddaf", "type": "choice", "prompt": "某市养老保险规定缴费基数上限为当地月平均工资的300%，个人缴费比例为8%，单位缴费比例为16%。已知2023年该市月平均工资为8000元，职工王某月工资为25000元。王某及其单位每月养老保险缴费总额为：", "choices": {"A": "6000元", "B": "1920元", "C": "5760元", "D": "5920元"}}
{"id": "682486fbb449f91b8372ddb0", "type": "choice", "prompt": "根据2023年经济普查报告与2020-2023年统计年鉴数据：2019年三大产业就业人数占比为第一产业30%、第二产业35%、第三产业35%；2023年调整为第一产业25%、第二产业32%、第三产业43%。统计年鉴显示，第三产业就业人数年均增长5.2%（复合增长率），第二产业年均增长1.8%，第一产业年均下降3.5%。以下说法正确的是：", "choices": {"A": "第一产业就业人数绝对值四年间减少量高于第三产业增加量", "B": "按统计年鉴增速推算，第三产业占比应增长8个百分点，与经济普查数据矛盾", "C": "第二产业2023年就业人数较2019年绝对减少", "D": "第三产业复合增长率若保持5.2%，其占比变化与经济普查数据相符"}}
{"id": "682486fbb449f91b8372ddb1", "type": "choice", "prompt": "某政务大厅立体导览模型展开图如下，各面标记功能区：正面-咨询台，右面-服务窗口，左面-等候区，顶面-自助服务，底面-储物间，背面-办公室。将该展开图折叠成立方体后，绕竖直轴逆时针旋转90度，此时正面的功能区是？", "choices": {"A": "咨询台", "B": "服务窗口", "C": "等候区", "D": "自助服务"}}
{"id": "682486fbb449f91b8372ddb2", "type": "choice", "prompt": "某市推行'一网通办'改革时，要求各部门将行政审批事项纳入统一政务平台。根据《法治政府建设实施纲要》，下列哪项举措符合'优化政府职责体系'要求？", "choices": {"A": "全面推行审批服务'马上办、网上办、就近办、一次办'，非涉密事项全程电子化办理", "B": "建立'先备案后审查'机制，允许企业先行开展经营活动再补充材料", "C": "将市场监管局的流通领域商品质量监督权划归质量技术监督局统一行使", "D": "在行政效能评估中将群众满意度指标权重设定为考核总分值的30%"}}
{"id": "682486fbb449f91b8372ddb3", "type": "choice", "prompt": "某市2019-2023年季度财政支出增幅（%）依次为：3、6、5、9、7，请根据数字规律推断第六项增幅。注：奇偶项分别遵循独立规律。", "choices": {"A": "9", "B": "12", "C": "13.5", "D": "14"}}
{"id": "682486fbb449f91b8372ddb4", "type": "choice", "prompt": "某市生态环境局拟于2024年9月10日召开全市污染防治攻坚推进会，要求各区县分局主要负责人参会。办公室秘书小王起草的通知中存在格式错误，请选出完全规范的选项。文件需标注秘密等级'秘密★1年'，并附《会议材料汇编》电子版。", "choices": {"A": "《市生态环境局关于召开污染防治攻坚推进会的通告》\n密级：秘密1年\n文号：环办发[2024]25号\n附件：电子版材料", "B": "《市生态环境局污染防治攻坚推进会通知》\n文号：环办发〔2024〕25号\n秘密★1年\n附件：1.会议材料汇编（电子版）", "C": "《关于召开全市污染防治攻坚推进会的通知》\n环办发〔2024〕25号\n（秘密★1年）\n附件：《会议材料汇编》电子版", "D": "《市生态环境局关于召开全市污染防治攻坚推进会的通知》\n环办发〔2024〕25号 秘密★1年\n附件：1.会议材料汇编（电子版）"}}
{"id": "682486fbb449f91b8372ddb5", "type": "choice", "prompt": "在绝对零度下，推导三维自由电子气体的费米能级$\\varepsilon_F$时，以下哪个表达式正确反映了电子数密度$n$与费米能级的关系？已知电子服从费米-狄拉克分布，且满足$n = \\int_0^{\\infty} g(\\varepsilon) f_{FD}(\\varepsilon) d\\varepsilon$，其中$g(\\varepsilon)$为态密度。", "choices": {"A": "$\\varepsilon_F = \\frac{\\hbar^2}{2m}(6\\pi^2 n)^{1/3}$", "B": "$\\varepsilon_F = \\frac{\\hbar^2}{2m}(3\\pi^2 n)^{2/3} + kT$", "C": "$\\varepsilon_F = \\frac{\\hbar^2}{8m}(3\\pi^2 n)^{2/3}$", "D": "$\\varepsilon_F = \\frac{\\hbar^2}{2m}(3\\pi^2 n)^{2/3}$"}}
{"id": "682486fbb449f91b8372ddb6", "type": "choice", "prompt": "在紧束缚近似下，二维正方晶格s电子能带表达式及性质的正确描述是？\n\n能量公式形式及参数要求：\n- 最近邻跃迁积分为$t$，晶格常数为$a$\n- 波矢$(k_x, k_y)$需显式包含$a$\n\n高对称点分析：\nΓ点$(0,0)$附近展开至二次项时系数需正确，M点$(\\pi/a, \\pi/a)$处需给出能量值及简并度", "choices": {"A": "$E(\\mathbf{k})=E_0 - 2t[\\cos(k_x a) + \\cos(k_y a)]$\nΓ点展开：$E \\approx E_0 -4t + \\frac{ta^2}{2}(k_x^2+k_y^2)$\nM点$E=E_0+4t$，简并度1", "B": "$E(\\mathbf{k})=E_0 + 2t[\\cos(k_x) + \\cos(k_y)]$\nΓ点展开：$E \\approx E_0 -4t + t(k_x^2+k_y^2)$\nM点$E=E_0-4t$，简并度2", "C": "$E(\\mathbf{k})=E_0 - t[\\cos(2k_x a) + \\cos(2k_y a)]$\nΓ点展开：$E \\approx E_0 -2t + ta^2(k_x^2+k_y^2)$\nM点$E=E_0+2t$，简并度1", "D": "$E(\\mathbf{k})=E_0 -4t[\\cos(k_x a/2) + \\cos(k_y a/2)]$\nΓ点展开：$E \\approx E_0 -8t + ta^2(k_x^2+k_y^2)/2$\nM点$E=E_0$，简并度4"}}
{"id": "682486fbb449f91b8372ddb7", "type": "choice", "prompt": "在计算三维理想玻色气体的玻色-爱因斯坦凝聚临界温度时，需推导单粒子态密度并处理积分。以下哪一选项正确体现了推导链？\n\n关键步骤提示：\n(1) 三维势箱中波矢空间体积元为 \\(\\frac{V}{(2\\pi)^3}d^3k\\)，转换为能量空间时需利用\\(\\epsilon = \\frac{\\hbar^2 k^2}{2m}\\)\n(2) 正确态密度公式应满足 \\(g(\\epsilon)d\\epsilon = \\frac{V}{2\\pi^2\\hbar^3}(2m)^{3/2}\\sqrt{\\epsilon}d\\epsilon\\)\n(3) 粒子数积分表达式为 \\(N = \\int_0^{\\infty} \\frac{g(\\epsilon)}{e^{(\\epsilon-\\mu)/k_B T} - 1}d\\epsilon\\)\n(4) 临界温度处化学势\\(\\mu \\to 0\\)，积分需处理为\\(\\int_0^{\\infty} \\frac{\\sqrt{x}}{e^x - 1}dx = \\frac{\\sqrt{\\pi}}{2}\\zeta(3/2)\\)", "choices": {"A": "推导态密度时误将三维积分简化为二维，得到 \\(g(\\epsilon) = \\frac{V}{\\pi\\hbar^2}(2m)\\epsilon\\)，导致临界温度公式缺少质量项立方根", "B": "正确转换球坐标系下波矢空间积分：\\(g(\\epsilon)d\\epsilon = \\frac{V}{(2\\pi)^3}4\\pi k^2 \\frac{dk}{d\\epsilon}d\\epsilon\\)，代入\\(k=\\sqrt{2m\\epsilon}/\\hbar\\)得标准态密度公式，最终积分得 \\(T_c \\propto \\frac{n^{2/3}\\hbar^2}{m k_B}\\)", "C": "在临界温度计算时错误保留化学势\\(\\mu = -k_B T\\)，导致积分变为 \\(\\int_0^{\\infty} \\frac{\\sqrt{\\epsilon}}{e^{(\\epsilon +k_B T)/k_B T} - 1}d\\epsilon\\) 发散", "D": "使用费米子积分形式 \\(N = \\int_0^{\\infty} \\frac{g(\\epsilon)}{e^{(\\epsilon-\\mu)/k_B T} + 1}d\\epsilon\\)，导致临界温度表达式多出\\(\\ln 2\\)因子"}}
